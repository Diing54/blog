[{"content":"Today I learnt something worth publishing here. As developers we write code day by day and it is executed by our machines. But how does our computers understand this code and execute it ?\nI am going to walk through the four core changes of a GCC compiler to transform a simple C program into a state that a machine can understand and execute.\nI created a simple file main.c below:\n#include \u0026lt;stdio.h\u0026gt; int main() { int a = 10; int b = 5; int result = a + b; printf(\u0026#34;The result is: %d\\n\u0026#34;, result); return 0; } Step 1: Invoking the Preprocessor This is the first stage. The preprocessor finds this line, #include \u0026lt;stdio.h\u0026gt;, in order to extract the stdio.h header file and paste its entire contents into our source code main.c\nWe run the command gcc -E main.c -o main.i The -E flag tells the GCC to stop after preprocessing -o main.i specifies the output file name. The .i extension is the standard for preprocessed C files Step 2: Compile to Assembly Code We take the preprocessed file and compile it to assembly language, a low-level, but still human-readable.\nWe run the command gcc -S main.i -o main.s The -S flag tells the compiler/GCC to stop after compiling to assembly The output is main.s with assembly code inside Step 3: Assemble to Object Code The assembler\u0026rsquo;s job is to convert the human-readable assembly code into pure machine code (binary)\nWe run the command gcc -c main.s -o main.o The -c flag tells the compiler to stop after the assembly stage The output is the object file main.o which is not yet executable Step 4: Link to Create an Executable File Our object file main.o contains the machine code for our main function but it doesn\u0026rsquo;t contain the code for the printf function. The linker\u0026rsquo;s job is to find the printf code in the C standard library and combine it with our object file to create a runnable program\nWe run the command gcc main.o -o my_program The final executable file my_program is created In the terminal, we can now run our program\n./my_program\nThe output is:\nThe result is: 15\nReferences ","permalink":"https://Diing54.github.io/blog/posts/under-the-hood-of-a-gcc-compiler/","summary":"\u003cp\u003eToday I learnt something worth publishing here. As developers we write code day by day and it is executed by our machines. But how does our computers understand this code and execute it ?\u003c/p\u003e\n\u003cp\u003eI am going to walk through the four core changes of a GCC compiler to transform a simple C program into a state that a machine can understand and execute.\u003c/p\u003e\n\u003cp\u003eI created a simple file \u003ccode\u003emain.c\u003c/code\u003e below:\u003c/p\u003e","title":"Under the Hood of a Gcc Compiler"},{"content":"I have been working on my final year project lately. Today, I plan to export the trained model onto the raspberry pi AI camera hardware. The model size is 22 mbs and the AI camera can accommodate only 8 mbs. Luckily, there are quantization methods provided by ultralytics that will shrink the model without it losing too much accuracy.\nReferences ","permalink":"https://Diing54.github.io/blog/posts/final-year-project/","summary":"\u003cp\u003eI have been working on my final year project lately. Today, I plan to export  the trained model onto the raspberry pi AI camera hardware. The model size is 22 mbs and the AI camera can accommodate only 8 mbs. Luckily, there are quantization methods provided by ultralytics that will shrink the model without it losing too much accuracy.\u003c/p\u003e\n\u003ch3 id=\"references\"\u003eReferences\u003c/h3\u003e","title":"Final Year Project"},{"content":"Another day creating another automation, it may not be a complex one but still its an automation. Today I created another simple beautiful script that automates my blogging workflow. Instead of manually navigating to my Hugo directory and running commands, I can create a new post from anywhere in my system by just running the custom command \u0026ldquo;blog\u0026rdquo;.\nHow it works\nRun blog from the command line Enter your blog title The scripts automatically generates a file using Hugo\u0026rsquo;s archetype template. The file\u0026rsquo;s name is the title provided It then opens the file automatically in Neovim for editing The script:\n#!/bin/bash BLOG_DIR=\u0026#34;$HOME/blog\u0026#34; cd \u0026#34;$BLOG_DIR\u0026#34; read -p \u0026#34;Enter post title: \u0026#34; title filename=$(echo \u0026#34;$title\u0026#34; | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \u0026#39; \u0026#39; \u0026#39;-\u0026#39; | sed \u0026#39;s/[^a-z0-9-]//g\u0026#39;) hugo new \u0026#34;posts/${filename}.md\u0026#34; nvim \u0026#34;content/posts/${filename}.md\u0026#34; References ","permalink":"https://Diing54.github.io/blog/posts/created-another-script/","summary":"\u003cp\u003eAnother day creating another automation, it may not be a complex one but still its an automation. Today I created another simple beautiful script that automates my blogging workflow. Instead of manually navigating to my Hugo directory and running commands, I can create a new post from anywhere in my system by just running the custom command \u0026ldquo;blog\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHow it works\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRun \u003ccode\u003eblog\u003c/code\u003e from the command line\u003c/li\u003e\n\u003cli\u003eEnter your blog title\u003c/li\u003e\n\u003cli\u003eThe scripts automatically generates a file using Hugo\u0026rsquo;s archetype template. The file\u0026rsquo;s name is the title provided\u003c/li\u003e\n\u003cli\u003eIt then opens the file automatically in Neovim for editing\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eThe script:\u003c/strong\u003e\u003c/p\u003e","title":"Created Another Script"},{"content":"I created a simple script for generating a new note for my devops learning notes. This will increase my productivity since I will not have to bother typing current dates and times of each and every note. The script works perfect as I only type \u0026ldquo;devops\u0026rdquo; on my command line in any directory and I\u0026rsquo;m prompted to enter the name of the file which will also be the title of the note.\nAll this is done by bash scripting and an existing template which will be used in generating all the notes.\nReferences ","permalink":"https://Diing54.github.io/blog/posts/script-for-devops-notes/","summary":"\u003cp\u003eI created a simple script for generating a new note for my devops learning notes. This will increase my productivity since I will not have to bother typing current dates and times of each and every note. The script works perfect as I only type \u0026ldquo;devops\u0026rdquo; on my command line in any directory and I\u0026rsquo;m prompted to enter the name of the file which will also be the title of the note.\u003c/p\u003e","title":"Script for Devops Notes"},{"content":"I\u0026rsquo;m excited because i just configured my blog set-up, powered by Hugo and Papermod. I plan to post as long as I can and I believe it will be worth it in the future.\n\u0026ldquo;Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven\u0026rsquo;t found it yet, keep looking. Don\u0026rsquo;t settle.\u0026rdquo;\n— Steve Jobs\nReferences ","permalink":"https://Diing54.github.io/blog/posts/first-official-post/","summary":"\u003cp\u003eI\u0026rsquo;m excited because i just configured my blog set-up, powered by Hugo and Papermod. I plan to post as long as I can and I believe it will be worth it in the future.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven\u0026rsquo;t found it yet, keep looking. Don\u0026rsquo;t settle.\u0026rdquo;\u003c/em\u003e\u003cbr\u003e\n\u003cstrong\u003e— Steve Jobs\u003c/strong\u003e\u003c/p\u003e","title":"First Official Post"}]